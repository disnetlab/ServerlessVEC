FROM --platform=${TARGETPLATFORM:-linux/amd64} openfaas/of-watchdog:0.7.7 as watchdog
FROM --platform=${TARGETPLATFORM:-linux/amd64} python:3.7-slim-buster

COPY --from=watchdog /fwatchdog /usr/bin/fwatchdog

ARG ADDITIONAL_PACKAGE
# Alternatively use ADD https:// (which will not be cached by Docker builder)


# Uncomment if you want to use native modules

# Add non root user

#USER app
ENV PATH=$PATH:/home/app/.local/bin

WORKDIR /home/app/

COPY index.py           .
COPY requirements.txt   .
COPY yolov3-tiny.txt     .
COPY yolov3-tiny.cfg     .
COPY yolov3-tiny.weights .

#USER root
COPY abc.jpg           .

# Build the function directory and install any user-specified components
#USER app

COPY requirements.txt	.

#install function code
#USER root

ADD function/   /home/app
#RUN chown -R app:app ../

# ARG TEST_COMMAND=tox
# ARG TEST_ENABLED=false
# RUN if [ "$TEST_ENABLED" == "false" ]; then \
#     echo "skipping tests";\
#     else \
#     eval "$TEST_COMMAND"; \
#     fi
RUN apt-get update && \
 chmod +x /usr/bin/fwatchdog && \
 echo "=================================================" && \
 pip install flask && \
 pip install waitress && \
 pip install tox==3.* && \
 pip install opencv-python && \
 pip install -r requirements.txt && \
 apt-get install openssl ${ADDITIONAL_PACKAGE} && \
 apt-get -qy update && \
 apt install -y libc-bin && \
 apt install -y libgl1 libglib2.0-0 libsm6 libxrender1 libxext6 && \
 apt install -y net-tools iputils-ping curl ethtool iputils-ping iproute2 && \
 chmod 777 -R /tmp && \
 mkdir -p function && \
 touch ./function/__init__.py && \
 pip install --user -r requirements.txt 

#RUN chmod +x /usr/bin/fwatchdog
#RUN apt-get install openssl ${ADDITIONAL_PACKAGE}
#RUN addgroup --system app && adduser app --system --ingroup app
#RUN chown app /home/app
#RUN pip install -r requirements.txt
#RUN apt-get -qy update
#RUN apt install -y libc-bin
#RUN apt install -y libgl1 libglib2.0-0 libsm6 libxrender1 libxext6
#RUN apt install -y net-tools iputils-ping curl ethtool iputils-ping iproute2
#RUN chmod 777 -R /tmp
#RUN chmod 777 coldStart.sh
#RUN mkdir -p function
#RUN touch ./function/__init__.py
#RUN chown -R app:app *
#RUN pip install --user -r requirements.txt

WORKDIR /home/app/

#configure WSGI server and healthcheck
#USER root

ENV fprocess="python index.py"
#ENV fprocess="python -m http.server --bind 0.0.0.0 80"

ENV cgi_headers="true"
ENV mode="http"
ENV upstream_url="http://127.0.0.1:5000"

HEALTHCHECK --interval=5s CMD [ -e /tmp/.lock ] || exit 1

#CMD ["fwatchdog"]
CMD ["python -m http.server --bind 0.0.0.0 80"]
